/*
 * Budgeting Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Client.Auth;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupTransactionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add Group Transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRead</returns>
        TransactionRead AddGroupTransaction(Guid groupUuid, TransactionCreate transactionCreate, int operationIndex = 0);

        /// <summary>
        /// Add Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRead</returns>
        ApiResponse<TransactionRead> AddGroupTransactionWithHttpInfo(Guid groupUuid, TransactionCreate transactionCreate, int operationIndex = 0);
        /// <summary>
        /// Delete Group Transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message DeleteGroupTransaction(Guid transactionUuid, Guid groupUuid, int operationIndex = 0);

        /// <summary>
        /// Delete Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> DeleteGroupTransactionWithHttpInfo(Guid transactionUuid, Guid groupUuid, int operationIndex = 0);
        /// <summary>
        /// Get Group Transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRead</returns>
        TransactionRead GetGroupTransaction(Guid groupUuid, Guid transactionUuid, int operationIndex = 0);

        /// <summary>
        /// Get Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRead</returns>
        ApiResponse<TransactionRead> GetGroupTransactionWithHttpInfo(Guid groupUuid, Guid transactionUuid, int operationIndex = 0);
        /// <summary>
        /// Get Group Transactions
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="before">Get transactions before this date (optional)</param>
        /// <param name="after">Get transactions after this date (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="itemsPerPage"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListResponseTransactionRead</returns>
        PaginatedListResponseTransactionRead GetGroupTransactions(Guid groupUuid, DateTime? before = default(DateTime?), DateTime? after = default(DateTime?), int? page = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0);

        /// <summary>
        /// Get Group Transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="before">Get transactions before this date (optional)</param>
        /// <param name="after">Get transactions after this date (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="itemsPerPage"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListResponseTransactionRead</returns>
        ApiResponse<PaginatedListResponseTransactionRead> GetGroupTransactionsWithHttpInfo(Guid groupUuid, DateTime? before = default(DateTime?), DateTime? after = default(DateTime?), int? page = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0);
        /// <summary>
        /// Update Group Transaction
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        Message UpdateGroupTransaction(Guid transactionUuid, Guid groupUuid, TransactionUpdate transactionUpdate, int operationIndex = 0);

        /// <summary>
        /// Update Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> UpdateGroupTransactionWithHttpInfo(Guid transactionUuid, Guid groupUuid, TransactionUpdate transactionUpdate, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupTransactionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Add Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRead</returns>
        System.Threading.Tasks.Task<TransactionRead> AddGroupTransactionAsync(Guid groupUuid, TransactionCreate transactionCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionRead>> AddGroupTransactionWithHttpInfoAsync(Guid groupUuid, TransactionCreate transactionCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> DeleteGroupTransactionAsync(Guid transactionUuid, Guid groupUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> DeleteGroupTransactionWithHttpInfoAsync(Guid transactionUuid, Guid groupUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRead</returns>
        System.Threading.Tasks.Task<TransactionRead> GetGroupTransactionAsync(Guid groupUuid, Guid transactionUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransactionRead>> GetGroupTransactionWithHttpInfoAsync(Guid groupUuid, Guid transactionUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Group Transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="before">Get transactions before this date (optional)</param>
        /// <param name="after">Get transactions after this date (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="itemsPerPage"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListResponseTransactionRead</returns>
        System.Threading.Tasks.Task<PaginatedListResponseTransactionRead> GetGroupTransactionsAsync(Guid groupUuid, DateTime? before = default(DateTime?), DateTime? after = default(DateTime?), int? page = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Group Transactions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="before">Get transactions before this date (optional)</param>
        /// <param name="after">Get transactions after this date (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="itemsPerPage"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListResponseTransactionRead)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedListResponseTransactionRead>> GetGroupTransactionsWithHttpInfoAsync(Guid groupUuid, DateTime? before = default(DateTime?), DateTime? after = default(DateTime?), int? page = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> UpdateGroupTransactionAsync(Guid transactionUuid, Guid groupUuid, TransactionUpdate transactionUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Group Transaction
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> UpdateGroupTransactionWithHttpInfoAsync(Guid transactionUuid, Guid groupUuid, TransactionUpdate transactionUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupTransactionsApi : IGroupTransactionsApiSync, IGroupTransactionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupTransactionsApi : IGroupTransactionsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupTransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupTransactionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupTransactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupTransactionsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupTransactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupTransactionsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupTransactionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupTransactionsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Add Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRead</returns>
        public TransactionRead AddGroupTransaction(Guid groupUuid, TransactionCreate transactionCreate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionRead> localVarResponse = AddGroupTransactionWithHttpInfo(groupUuid, transactionCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRead</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransactionRead> AddGroupTransactionWithHttpInfo(Guid groupUuid, TransactionCreate transactionCreate, int operationIndex = 0)
        {
            // verify the required parameter 'transactionCreate' is set
            if (transactionCreate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionCreate' when calling GroupTransactionsApi->AddGroupTransaction");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupUuid)); // path parameter
            localVarRequestOptions.Data = transactionCreate;

            localVarRequestOptions.Operation = "GroupTransactionsApi.AddGroupTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransactionRead>("/api/v1/group/{group_uuid}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRead</returns>
        public async System.Threading.Tasks.Task<TransactionRead> AddGroupTransactionAsync(Guid groupUuid, TransactionCreate transactionCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionRead> localVarResponse = await AddGroupTransactionWithHttpInfoAsync(groupUuid, transactionCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRead)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransactionRead>> AddGroupTransactionWithHttpInfoAsync(Guid groupUuid, TransactionCreate transactionCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionCreate' is set
            if (transactionCreate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionCreate' when calling GroupTransactionsApi->AddGroupTransaction");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupUuid)); // path parameter
            localVarRequestOptions.Data = transactionCreate;

            localVarRequestOptions.Operation = "GroupTransactionsApi.AddGroupTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<TransactionRead>("/api/v1/group/{group_uuid}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddGroupTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message DeleteGroupTransaction(Guid transactionUuid, Guid groupUuid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Message> localVarResponse = DeleteGroupTransactionWithHttpInfo(transactionUuid, groupUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public Org.OpenAPITools.Client.ApiResponse<Message> DeleteGroupTransactionWithHttpInfo(Guid transactionUuid, Guid groupUuid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(transactionUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupUuid)); // path parameter

            localVarRequestOptions.Operation = "GroupTransactionsApi.DeleteGroupTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Message>("/api/v1/group/{group_uuid}/transactions/{transaction_uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> DeleteGroupTransactionAsync(Guid transactionUuid, Guid groupUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Message> localVarResponse = await DeleteGroupTransactionWithHttpInfoAsync(transactionUuid, groupUuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Message>> DeleteGroupTransactionWithHttpInfoAsync(Guid transactionUuid, Guid groupUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(transactionUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupUuid)); // path parameter

            localVarRequestOptions.Operation = "GroupTransactionsApi.DeleteGroupTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Message>("/api/v1/group/{group_uuid}/transactions/{transaction_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteGroupTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TransactionRead</returns>
        public TransactionRead GetGroupTransaction(Guid groupUuid, Guid transactionUuid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionRead> localVarResponse = GetGroupTransactionWithHttpInfo(groupUuid, transactionUuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TransactionRead</returns>
        public Org.OpenAPITools.Client.ApiResponse<TransactionRead> GetGroupTransactionWithHttpInfo(Guid groupUuid, Guid transactionUuid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("transaction_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(transactionUuid)); // path parameter

            localVarRequestOptions.Operation = "GroupTransactionsApi.GetGroupTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TransactionRead>("/api/v1/group/{group_uuid}/transactions/{transaction_uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransactionRead</returns>
        public async System.Threading.Tasks.Task<TransactionRead> GetGroupTransactionAsync(Guid groupUuid, Guid transactionUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<TransactionRead> localVarResponse = await GetGroupTransactionWithHttpInfoAsync(groupUuid, transactionUuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransactionRead)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<TransactionRead>> GetGroupTransactionWithHttpInfoAsync(Guid groupUuid, Guid transactionUuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("transaction_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(transactionUuid)); // path parameter

            localVarRequestOptions.Operation = "GroupTransactionsApi.GetGroupTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TransactionRead>("/api/v1/group/{group_uuid}/transactions/{transaction_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="before">Get transactions before this date (optional)</param>
        /// <param name="after">Get transactions after this date (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="itemsPerPage"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedListResponseTransactionRead</returns>
        public PaginatedListResponseTransactionRead GetGroupTransactions(Guid groupUuid, DateTime? before = default(DateTime?), DateTime? after = default(DateTime?), int? page = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PaginatedListResponseTransactionRead> localVarResponse = GetGroupTransactionsWithHttpInfo(groupUuid, before, after, page, itemsPerPage);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="before">Get transactions before this date (optional)</param>
        /// <param name="after">Get transactions after this date (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="itemsPerPage"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedListResponseTransactionRead</returns>
        public Org.OpenAPITools.Client.ApiResponse<PaginatedListResponseTransactionRead> GetGroupTransactionsWithHttpInfo(Guid groupUuid, DateTime? before = default(DateTime?), DateTime? after = default(DateTime?), int? page = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupUuid)); // path parameter
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "items_per_page", itemsPerPage));
            }

            localVarRequestOptions.Operation = "GroupTransactionsApi.GetGroupTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedListResponseTransactionRead>("/api/v1/group/{group_uuid}/transactions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Group Transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="before">Get transactions before this date (optional)</param>
        /// <param name="after">Get transactions after this date (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="itemsPerPage"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedListResponseTransactionRead</returns>
        public async System.Threading.Tasks.Task<PaginatedListResponseTransactionRead> GetGroupTransactionsAsync(Guid groupUuid, DateTime? before = default(DateTime?), DateTime? after = default(DateTime?), int? page = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PaginatedListResponseTransactionRead> localVarResponse = await GetGroupTransactionsWithHttpInfoAsync(groupUuid, before, after, page, itemsPerPage, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Group Transactions 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupUuid"></param>
        /// <param name="before">Get transactions before this date (optional)</param>
        /// <param name="after">Get transactions after this date (optional)</param>
        /// <param name="page"> (optional, default to 1)</param>
        /// <param name="itemsPerPage"> (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedListResponseTransactionRead)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaginatedListResponseTransactionRead>> GetGroupTransactionsWithHttpInfoAsync(Guid groupUuid, DateTime? before = default(DateTime?), DateTime? after = default(DateTime?), int? page = default(int?), int? itemsPerPage = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("group_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupUuid)); // path parameter
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (itemsPerPage != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "items_per_page", itemsPerPage));
            }

            localVarRequestOptions.Operation = "GroupTransactionsApi.GetGroupTransactions";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedListResponseTransactionRead>("/api/v1/group/{group_uuid}/transactions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupTransactions", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Message</returns>
        public Message UpdateGroupTransaction(Guid transactionUuid, Guid groupUuid, TransactionUpdate transactionUpdate, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Message> localVarResponse = UpdateGroupTransactionWithHttpInfo(transactionUuid, groupUuid, transactionUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Message</returns>
        public Org.OpenAPITools.Client.ApiResponse<Message> UpdateGroupTransactionWithHttpInfo(Guid transactionUuid, Guid groupUuid, TransactionUpdate transactionUpdate, int operationIndex = 0)
        {
            // verify the required parameter 'transactionUpdate' is set
            if (transactionUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionUpdate' when calling GroupTransactionsApi->UpdateGroupTransaction");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(transactionUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupUuid)); // path parameter
            localVarRequestOptions.Data = transactionUpdate;

            localVarRequestOptions.Operation = "GroupTransactionsApi.UpdateGroupTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Message>("/api/v1/group/{group_uuid}/transactions/{transaction_uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> UpdateGroupTransactionAsync(Guid transactionUuid, Guid groupUuid, TransactionUpdate transactionUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Message> localVarResponse = await UpdateGroupTransactionWithHttpInfoAsync(transactionUuid, groupUuid, transactionUpdate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update Group Transaction 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="transactionUuid">UUID of the transaction</param>
        /// <param name="groupUuid"></param>
        /// <param name="transactionUpdate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Message>> UpdateGroupTransactionWithHttpInfoAsync(Guid transactionUuid, Guid groupUuid, TransactionUpdate transactionUpdate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'transactionUpdate' is set
            if (transactionUpdate == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'transactionUpdate' when calling GroupTransactionsApi->UpdateGroupTransaction");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("transaction_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(transactionUuid)); // path parameter
            localVarRequestOptions.PathParameters.Add("group_uuid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(groupUuid)); // path parameter
            localVarRequestOptions.Data = transactionUpdate;

            localVarRequestOptions.Operation = "GroupTransactionsApi.UpdateGroupTransaction";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (OAuth2PasswordBearer) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Message>("/api/v1/group/{group_uuid}/transactions/{transaction_uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateGroupTransaction", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
